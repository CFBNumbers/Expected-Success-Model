library(xgboost)
library(tidyverse)
library(dplyr)
library(na.tools)
library(ggimage)
library(cfbscrapR)
library(ggrepel)
library(jsonlite)
library(glue)
library(devtools)
library(png)
library(grid)
library(pracma)

seasons <- 2014:2020
pbp <- purrr::map_df(seasons, function(x) {
  readRDS(
    url(
      glue::glue("https://raw.githubusercontent.com/saiemgilani/cfbscrapR-data/master/data/rds/pbp_players_pos_{x}.rds")
    )
  )
})

set.seed(2013)

pbp <- pbp %>% mutate(
  label = ifelse(down == 1, ifelse(yards_gained >= 0.4*distance, 1, 0),
                 ifelse(down == 2, ifelse(yards_gained >= 0.6*distance, 1, 0), 
                        ifelse(yards_gained >= distance, 1, 0))),
  pos_home = ifelse(offense_play == home, 1, 0))


model_data <- pbp %>% filter(pass == 1 | rush == 1, !is.na(label), penalty_flag == FALSE) %>% 
  select(label, year, down, distance, yards_to_goal, pos_home, period, TimeSecsRem, wp_before, off_timeouts_rem_before, 
         def_timeouts_rem_before, score_diff, Under_two, ExpScoreDiff_Time_Ratio) %>% 
  mutate(label = as.numeric(label))


nrounds <- 500
params <-
  list(
    booster = "gbtree",
    objective = "binary:logistic",
    eval_metric = c("error", "logloss"),
    eta = .015,
    gamma = 2,
    subsample = 0.8,
    colsample_bytree = 0.8,
    max_depth = 7,
    min_child_weight = 1,
    base_score = mean(model_data$label))

cv_results <- map_dfr(2014:2020, function(x) {
test_data <- model_data %>%
  filter(year == x) %>%
  select(-year)
train_data <- model_data %>%
  filter(year != x) %>%
  select(-year)

train_data$data <- as.matrix(train_data %>% select(-label))
train_data$data <- as(train_data$data, "dgCMatrix")

test_data$data <- as.matrix(test_data %>% select(-label))
test_data$data <- as(test_data$data, "dgCMatrix")


  full_train <- xgboost::xgb.DMatrix(data = train_data$data,
                                     label = train_data$label
                                    )
  succ_model <- xgboost::xgboost(params = params, data = full_train, nrounds = nrounds, verbose = 2)
  
preds <- as.data.frame(predict(succ_model, test_data$data))
  
  
cv_data <- bind_cols(test_data, preds) %>% mutate(year = x)
cv_data$data <- NULL

cv_data <- cv_data %>% mutate(xp = cv_data$`predict(succ_model, test_data$data)`)
return(cv_data)
})


xp_cv_loso_calibration_results <- cv_results %>%
  mutate(
    bin_pred_prob = round(xp / 0.05) * .05,
    situation = case_when(
      down == 1 ~ "1st down",
      down == 2 ~ "2nd down",
      down == 3 ~ "3rd down",
      TRUE ~ "Other"
    )
  ) %>%
  group_by(situation, bin_pred_prob) %>%
  summarize(
    n_plays = n(),
    n_complete = length(which(label == 1)),
    bin_actual_prob = n_complete / n_plays
  )

ann_text <- data.frame(
  x = c(.25, 0.75), y = c(0.75, 0.25),
  lab = c("More times\nthan expected", "Fewer times\nthan expected")
)


xp_cv_cal_error <- xp_cv_loso_calibration_results %>%
  ungroup() %>%
  mutate(cal_diff = abs(bin_pred_prob - bin_actual_prob)) %>%
  group_by(situation) %>%
  summarize(
    weight_cal_error = weighted.mean(cal_diff, n_plays, na.rm = TRUE),
    n_complete = sum(n_complete, na.rm = TRUE)
  )

error <- round(with(xp_cv_cal_error, weighted.mean(weight_cal_error, n_complete)), 4)

xp_cv_loso_calibration_results %>%
  ungroup() %>%
  mutate(situation = fct_relevel(
    situation,
    "1st down", "2nd down", "3rd down", "Other"
  )) %>%
  ggplot() +
  geom_point(aes(x = bin_pred_prob, y = bin_actual_prob, size = n_plays)) +
  geom_smooth(aes(x = bin_pred_prob, y = bin_actual_prob), method = "loess") +
  geom_abline(slope = 1, intercept = 0, color = "black", lty = 2) +
  coord_equal() +
  scale_x_continuous(limits = c(0, 1)) +
  scale_y_continuous(limits = c(0, 1)) +
  labs(
    size = "Number of plays",
    x = "Estimated Success Rate",
    y = "Observed Success Rate",
    title = "Expected Success Rate Model",
    subtitle = "@CFBNumbers",
    caption = paste("Calibration Error",error, sep = ":")
  ) +
  geom_text(data = ann_text, aes(x = x, y = y, label = lab), size = 3) +
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    strip.background = element_blank(),
    strip.text = element_text(size = 12),
    axis.title = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 10, angle = 90),
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 12),
    legend.position = "bottom",
    plot.subtitle = element_text(hjust = 0.5),
    plot.caption = element_text(hjust = 0.5)
  ) +
  facet_wrap(~situation, ncol = 4)
